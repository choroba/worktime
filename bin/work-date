#! /usr/bin/perl
use warnings;
use strict;
use feature qw{ say };

use Time::Piece;
use Getopt::Long;

sub auto_complete {
    my ($date) = @_;
    return $date unless $date =~ m=^[0-9]{4}(?:/(?:[0-9]{2})?)?=;
    $date .= substr "..../01/01", length $date;
    return $date
}

GetOptions('f|file=s' => \ my $file);
$file //= $ENV{HOME} . '/.worktime';
my ($from, $to) = @ARGV;
$from //= '0E0';
$to   //= localtime->ymd('/');

$_ = auto_complete($_) for $from, $to;

my $FH;
if ('-' eq $file) {
    $FH = *STDIN{IO};
} else {
    open $FH, '<', $file or die "Can't open $file: $!";
}

my %projects;
while (<$FH>) {
    my ($in_out, $date, $time, $project) = split;

    last if $date gt $to;

    if ('i' eq $in_out) {
        if ($projects{$project}{start}) {
            die "Double check-in for $project."

        } elsif ($date lt $from) {
            $projects{$project}{start} = [ $from, '00:00:00' ];

        } elsif ($date le $to) {
            $projects{$project}{start} = [ $date, $time ];
        }

    } elsif ('o' eq $in_out) {
        if (! $projects{$project}{start}) {
            die "No check-in for $project."

        } elsif ($date lt $from) {
            delete $projects{$project}{start};

        } elsif ($date le $to) {
            $projects{$project}{sum} += between($projects{$project}{start}, $date, $time);

        } else {
            $projects{$project}{sum} += between($projects{$project}{start}, $to, '00:00:00', 'add day');
        }
        delete $projects{$project}{start};

    } else {
        die "Invalid state '$in_out'."
    }
}

my $endtime;
if ($to eq localtime->ymd('/')) {
    $endtime = localtime->hms;
} else {
    $to = add_day($to);
    $endtime = '00:00:00';
}
for my $project (sort keys %projects) {
    $projects{$project}{sum} += between($projects{$project}{start}, $to, $endtime)
        if $projects{$project}{start};
    next unless $projects{$project}{sum};
    my $all  = $projects{$project}{sum};
    my $secs = $all % 60;
    $all     = int $all / 60;
    my $mins = $all % 60;
    my $hrs  = int $all / 60;
    printf "%s\t%02d:%02d:%02d\n", $project, $hrs, $mins, $secs;
}


sub between {
    my ($from, $to_date, $to_time, $add_day) = @_;
    my ($from_date, $from_time) = @$from;
    $to_date = add_day($to_date) if $add_day;
    my $start = 'Time::Piece'->strptime($from_date . $from_time, '%Y/%m/%d%H:%M:%S');
    my $end   = 'Time::Piece'->strptime($to_date   . $to_time,   '%Y/%m/%d%H:%M:%S');
    return $end - $start
}

sub add_day {
    my ($date) = @_;
    my $secs = 'Time::Piece'->strptime($date, '%Y/%m/%d')->epoch;
    $secs += 60 * 60 * 26;
    $date = localtime($secs)->ymd('/');
    return $date
}
